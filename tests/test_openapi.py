# =================================================================
#
# Authors: Tom Kralidis <tomkralidis@gmail.com>
#
# Copyright (c) 2020 Tom Kralidis
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# =================================================================

from pygeoapi.openapi import get_ogc_schemas_location
from pygeoapi.openapi import get_oas_30
import pytest
import os
from pygeoapi.util import yaml_load
import logging


LOGGER = logging.getLogger(__name__)


def test_str2bool():

    default = {
        'url': 'http://localhost:5000'
    }

    osl = get_ogc_schemas_location(default)
    assert osl == 'http://schemas.opengis.net'

    default['ogc_schemas_location'] = 'http://example.org/schemas'
    osl = get_ogc_schemas_location(default)
    assert osl == 'http://example.org/schemas'

    default['ogc_schemas_location'] = '/opt/schemas.opengis.net'
    osl = get_ogc_schemas_location(default)


def get_test_file_path(filename):
    """helper function to open test file safely"""

    if os.path.isfile(filename):
        return filename
    else:
        return 'tests/{}'.format(filename)


@pytest.fixture()
def config():
    #using custom openapi config test file with cql specifications 
    with open(get_test_file_path('pygeoapi-test-openapi-config.yml')) as fh:
        return yaml_load(fh)


@pytest.fixture()
def get_oas_30_(config):
    return get_oas_30(config)


def test_cql_filters(get_oas_30_):
    """add your assertions here for every piece of the openapi document related to CQL extension"""

    assert isinstance(get_oas_30_, dict)

    #assertions for filter and filter-lang parameters generated by get_oas_30_
    assert 'filter' in get_oas_30_['components']['parameters'] 
    assert 'filter-lang' in get_oas_30_['components']['parameters']
    
    #assertion for Qeryables response
    assert 'Queryables' in get_oas_30_['components']['responses']

    #assertion for queryables schema 
    assert 'queryables' in get_oas_30_['components']['schemas']

    #assertion for different filter features schema
    filters = ['predicates', 'logicalExpression', 'comparisonExpressions', 'spatialExpressions',
                'temporalExpressions', 'and', 'or', 'not', 'eq', 'lt', 'gt', 'lte', 'gte',
                'between', 'like', 'in', 'equals', 'disjoint', 'touches', 'within', 'overlaps',
                'crosses', 'intersects', 'contains', 'after', 'before', 'begins', 'begunby',
                'tcontains', 'during', 'endedby', 'ends', 'tequals', 'meets', 'metby', 'toverlaps',
                'overlappedby', 'anyinteracts', 'tintersects', 'booleanOperands', 'arithmeticOperands',
                'add', 'sub', 'mul', 'div', 'scalarOperands', 'spatialOperands', 'temporalOperands',
                'function', 'functionObjectArgument', 'scalarLiteral', 'geometryLiteral', 'bbox',
                'envelopeLiteral', 'temporalLiteral', 'timeLiteral', 'periodLiteral',
                'capabilities-assertion', 'functionDescription', 'filter-capabilities']
    for filter in filters:
        assert filter in get_oas_30_['components']['schemas']

    #assertion for logical expressions properties
    logicalExpressions = ['and', 'or', 'not']
    for logicalExpression in logicalExpressions:
        assert logicalExpression in get_oas_30_['components']['schemas']['logicalExpression']['properties']

    #assertion for comparison expressions properties
    comparisonExpressions = ['eq', 'lt', 'gt', 'lte', 'gte', 'between', 'like', 'in']
    for comparisonExpression in comparisonExpressions:
        assert comparisonExpression in get_oas_30_['components']['schemas']['comparisonExpressions']['properties']

    #assertion for spatial expressions properties
    spatialExpressions = ['equals', 'disjoint', 'touches', 'within', 'overlaps', 'crosses', 'intersects', 'contains']
    for spatialExpression in spatialExpressions:
        assert spatialExpression in get_oas_30_['components']['schemas']['spatialExpressions']['properties']

    #assertion for temporal expressions properties
    temporalExpressions = ['after', 'before', 'begins', 'begunby', 'tcontains', 'during', 'endedby',
                        'ends', 'tequals', 'meets', 'metby', 'toverlaps', 'overlappedby']
    for temporalExpression in temporalExpressions:
        assert temporalExpression in get_oas_30_['components']['schemas']['temporalExpressions']['properties']

    #assertion for arithmetic operands properties
    arithmeticOperands = ['property', 'function', 'value', '+', '-', '*', '/']
    for props in arithmeticOperands:
        assert props in get_oas_30_['components']['schemas']['arithmeticOperands']['properties']

    #assertion for scalar operands properties
    scalarOperands = ['property', 'function', 'value', '+', '-', '*', '/']
    for props in scalarOperands:
        assert props in get_oas_30_['components']['schemas']['scalarOperands']['properties']

    #assertion for spatial operands properties
    spatialOperands = ['property', 'function', 'value']
    for props in spatialOperands:
        assert props in get_oas_30_['components']['schemas']['spatialOperands']['properties']

    #assertion for temporal operands properties
    temporalOperands = ['property', 'function', 'value']
    for props in temporalOperands:
        assert props in get_oas_30_['components']['schemas']['temporalOperands']['properties']

    #assertion for functions properties
    function = ['name', 'arguments']
    for props in function:
        assert props in get_oas_30_['components']['schemas']['function']['properties']

    #assertion for function Object Arguments properties
    functionObjectArgument = ['property', 'function', 'geometry', 'bbox', 'temporalValue', '+', '-', '*', '/']
    for props in functionObjectArgument:
        assert props in get_oas_30_['components']['schemas']['functionObjectArgument']['properties']

    #assertion for capabilities assertion properties
    capabilities_assertion = ['name', 'operators', 'operands']
    for props in capabilities_assertion:
        assert props in get_oas_30_['components']['schemas']['capabilities-assertion']['properties']

    #assertion for function description properties
    functionDescription = ['name', 'returns', 'arguments']
    for props in functionDescription:
        assert props in get_oas_30_['components']['schemas']['functionDescription']['properties']

    #assertion for filter capabilities properties
    filter_capabilities = ['conformance-classes', 'capabilities', 'functions']
    for props in filter_capabilities:
        assert props in get_oas_30_['components']['schemas']['filter-capabilities']['properties'] 
